package cen3024;

import java.util.HashMap;
import java.util.Map;

public class Fibonacci{
    private static Map<Integer, Long> memoizationMap = new HashMap<>();
    public static long fibonacciRecursive(int n){
        if (n <= 1)
            return n;
        if (memoizationMap.containsKey(n))
            return memoizationMap.get(n);
        long fibo = fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
        memoizationMap.put(n, fibo);
        return fibo;
    }

    public static long fibonacciIterative(int n){
        if (n <= 1)
            return n;
        long fibo = 0;
        long prev1 = 1;
        long prev2 = 0;

        for (int i=2; i<=n; i++) {
            fibo = prev1 + prev2;
            prev2 = prev1;
            prev1 = fibo;
        }
        return fibo;
    }
}


//Clas 2

package cen3024;

public class Mod5{

	public static void main(String[] args) {
		// TODO Auto-generated method stub
        Fibonacci fibonacci = new Fibonacci();

        int[] numbs = {2,4,6,8,10};

        System.out.println("Recursive:");
        System.out.println("Input\tTime");
        for (int input : numbs) {
            long startT = System.nanoTime();
            long res = fibonacci.fibonacciRecursive(input);
            long endTime = System.nanoTime();
            long passedT = endTime - startT;
            System.out.println(input + "\t" + passedT);
        }
        System.out.println("\nIterative:");
        System.out.println("Input\tTime");
        for (int input : numbs) {
            long startT = System.nanoTime();
            long res = fibonacci.fibonacciIterative(input);
            long endT = System.nanoTime();
            long passedT = endT - startT;
            System.out.println(input + "\t" + passedT);
        }
    }
}
